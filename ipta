#!/usr/bin/perl -w

use strict;
use warnings FATAL => qw(all);

my $debuglvl = 5;
my $doit = 1; # Not likely to use this parameter in this software, but don't want to fork the function.
my $version = "0.1";
my $rootcheck = 1; # If you know you can run iptables while not root, you can set this to 0
main();

###########################

sub main
{
my %cfg = handle_args(@ARGV);

beroot();

if($cfg{cmd} eq 'remind')
	{
	dispatch_remind();
	}
elsif($cfg{cmd} eq 'list')
	{
	dispatch_list();
	}
elsif($cfg{cmd} eq 'add')
	{

	}
elsif($cfg{cmd} eq 'remove')
	{

	}
elsif($cfg{cmd} eq 'flush')
	{

	}
elsif($cfg{cmd} eq 'lint')
	{

	}
elsif($cfg{cmd} eq 'imagine')
	{

	}
elsif($cfg{cmd} eq 'version')
	{
	version();exit(0);
	}
else	{usage();}
}

sub handle_args(@)
{	# More complex than my normal handle_args; 
	# Here we determine if the commandline is ipta-ish or
	# iptables-ish, and if it's the latter, we'll just exec iptables.
	# If it's the former, we want to do a partial parsing of the arguments
	# but preserve the ordering so we don't need to fully understand and re-pack
	# arguments for iptables.
	# We'll try to keep things simple by having commands that pass blobs of config to
	# iptables do the ipta args first.
my @args = @_;
my %ret;

if(! @args)
	{usage();}
if($args[0] =~ /^--help/)
	{usage();}
elsif($args[0] =~ /^--version/)
	{version();exit(0);}
elsif($args[0] =~ /^-/) # IPTables syntax, so just invoke iptables
	{exec("iptables", @args);}
else
	{
	$ret{cmd} = $args[0];
	# TODO ... parse other arguments
	}
return %ret;
}

##########
# Dispatch functions

sub dispatch_remind
{
print <<EOREMIND;
(From network Adapter, input interface visible)
PREROUTING:raw /* Can disable tracking with -j NOTRACK */
PREROUTING:mangle /* Can alter TOS, TTL or mark */
PREROUTING:nat /* Can do DNAT, SNAT, or REDIRECT */
(Packets are routed, sent to INPUT or FORWARD chains)

(INPUT, input interface visible)
INPUT:mangle /* Mainly used to mark packets for filtering */
INPUT:filter /* Can drop or reject packets */
(Packets handled by local system)

(FORWARD, input and output interface visible)
FORWARD:mangle /* Can alter TOS, TTL, or mark */
FORWARD:filter /* Can drop or reject packets */
(Packets enter POSTROUTING chain)

(From Software, output interface visible)
OUTPUT:raw /* before session tracking, -m state permitted after here */
OUTPUT:mangle /* Can alter TOS, TTL, or mark */
OUTPUT:nat /* Can DNAT, SNAT, or REDIRECT */
OUTPUT:filter /* Can drop or reject packets */
(Packets are routed, sent to POSTROUTING chain)

(POSTOUTING, output interface visible, for both forwarded and output packets)
POSTROUTING:mangle /* Can alter TOS, TTL, or mark */
POSTROUTING:nat /* Can do SNAT */
(Packets sent out on relevant interface)

EOREMIND
exit(0);
}

sub dispatch_list
{
my ($input) = @_;
my $tables = load_iptables();

if(! $input)
	{ # List everything

	}
else
	{ # Selective listing.
	# We're going to need to handle:
	# $CT - ChainTable
	# $CTR - ChainTable:Rule
	# INPUTPATH - Show just the tables used for packets hitting the local box
	# FWPATH - Show just the tables used for forwarding packets from one IF to another
	# OUTPATH - Show just the tables used for packets outgoing generated from local box
	die "TODO: finish dispatch_list: Not supported yet\n";
	}
}

sub dispatch_add
{
}

sub dispatch_remove
{
}

sub dispatch_flush
{
}

sub dispatch_lint
{
}

sub dispatch_imagine
{

}

sub usage
{ # TODO
die "TODO: write a usage summary\n";
}

sub version()
{
print "ipta, version $version\n";
}

##################
# iptables stuff

sub directed_iptables
{	# Exists to get tabular data for a particular chain-table permutation.
my ($chain, $table) = @_;

my $tablepart = "";
if(defined $table)
	{$tablepart .= "-t $table";}
my $ret = docmd("iptables -L $chain $tablepart -v -n --line-numbers"); # Do I want a -n ?
return $ret; # XXX May want to process this first, maybe into a list? Maybe return a listref?
}

sub find_extra_chains()
{ # Calls iptables -L with no further arguments, parses that to get a list of extra chains
	# Custom chains start with "Chain CHAINNAME (n references)
	# And this holds solid for just the "iptables -L" syntax (as opposed to with -v)
my @extrachains;
my $allchains = docmd("iptables -L");
open(ALLCH, "<", \$allchains) || die "Failed to read iptables ALLC result data:$!\n";
while(<ALLCH>)
	{
	next unless(/^Chain ([A-Za-z0-9]+) \(\d+ references\)/);
	my $chainname = $1;
	dprint(4, "Found custom chain [$chainname]");
	push(@extrachains, $chainname);
	}
return @extrachains;
}

sub load_iptables
{ # Load all the standard tablechains, and if we can, the nonstandard ones
my %tabs;

@{$tabs{PREROUTING}{raw}}{'policy','rules'}	= ipt_parse(directed_iptables('PREROUTING',	'raw'	));
@{$tabs{PREROUTING}{mangle}}{'policy','rules'}	= ipt_parse(directed_iptables('PREROUTING',	'mangle'));
@{$tabs{PREROUTING}{nat}}{'policy','rules'}	= ipt_parse(directed_iptables('PREROUTING',	'nat'	));

@{$tabs{INPUT}{mangle}}{'policy','rules'}	= ipt_parse(directed_iptables('INPUT',		'mangle'));
@{$tabs{INPUT}{filter}}{'policy','rules'}	= ipt_parse(directed_iptables('INPUT',		'filter'));

@{$tabs{FORWARD}{mangle}}{'policy','rules'}	= ipt_parse(directed_iptables('FORWARD',	'mangle'));
@{$tabs{FORWARD}{filter}}{'policy','rules'}	= ipt_parse(directed_iptables('FORWARD',	'filter'));

@{$tabs{OUTPUT}{raw}}{'policy','rules'}		= ipt_parse(directed_iptables('OUTPUT',		'raw'	));
@{$tabs{OUTPUT}{mangle}}{'policy','rules'}	= ipt_parse(directed_iptables('OUTPUT',		'mangle'));
@{$tabs{OUTPUT}{nat}}{'policy','rules'}		= ipt_parse(directed_iptables('OUTPUT',		'nat'	));
@{$tabs{OUTPUT}{filter}}{'policy','rules'}	= ipt_parse(directed_iptables('OUTPUT',		'filter'));

@{$tabs{POSTROUTING}{mangle}}{'policy','rules'}	= ipt_parse(directed_iptables('POSTROUTING',	'mangle'));
@{$tabs{POSTROUTING}{nat}}{'policy','rules'}	= ipt_parse(directed_iptables('POSTROUTING',	'nat'	));

my @extrachains = find_extra_chains();
foreach my $extra (@extrachains)
	{
	@{$tabs{$extra}{custom}}{'policy','rules'}	= ipt_parse(directed_iptables($extra,	undef	));
	}
return \%tabs;
}

sub ipt_parse($)
{	# Iterate over the lines that directed_iptables gives us and gives us a list of
	# the rules in that table in structured form. iptables numbering is 1-based, so
	# we'll need to be careful in later processing to take that into consideration so
	# our list or lint or positioned adding functions don't confuse people.
	#
	# NOTE: This is meant to be called on the output of itpables -L -v --line-numbers for
	#	only one table.
	# NOTE: If the output of iptables changes much, this parser might need to be rewritten.
my ($textglob) = @_;
my @rules;
open(RULES, "<", \$textglob) || die "Failed to read iptables result data:$!\n";
my $policy = undef;

my $summaryline = readline(RULES);
$summaryline =~ /^Chain [A-Za-z0-9]+ \((.*)\)$/;
my $innerdata = $1; # Differs between user-defined and builtin tables.
if($innerdata =~ /policy ([A-Z]+)/) # Builtin chain.
	{$policy = $1;}
	# Otherwise it's a user-defined chain and has no policy field.

readline(RULES); # We're not interested in the field header
while(<RULES>)
	{	# This should be a numbered rule line.
		# Fields are seperated by a number of spaces, padded to make them line up nicely.
		# Fields:
		#	Rule number
		#	Packets this rule has seen (ignore this)
		#	Bytes this rule has seen (ignore this)
		#	Disposition for this rule (BE CAREFUL: If there's no disposition, this field will be blank. WTF)
		#	Protocol (all, icmp, tcp, udp, maybe others)
		#	Options (????)
		#	input interface (any, or the name of one of the interfaces on the system, possibly plus-wildcarded, possibly !inverted)
		#	output interface (same idea as input)
		#	source ip/network. Or "anywhere". Possibly !inverted
		#	More text of rule. Possibly with C++ style comments. Possibly with some junk at the end.
	tr/\n\r\f//d;
	next if(/^\s*$/); # Skip blank lines
	my %thisrule;
	# We're going to keep whittling and parsing the first bit off of the line, in a field-sensitive way.
	s/^\d+ +//; # Rule number. We might validate these someday, but ignore them for now.
	s/^[0-9]+[KMG]* +[0-9]+[KMG]* +//; # Hit statistics. We don't care about these.
	s/^(?:(\w*) +)?(tcp|udp|udplite|icmp|esp|ah|sctp|all) +//; 	# Not entirely forward-proof. Kinda hackish, but the
									# target is allowed to be blank
	$thisrule{target} = $1;
	$thisrule{proto} = $2;
	dprint(9, "D: Targ $1 Proto $2");

	s/^-- +//; # Not sure what goes in the "opt" field. For now, just assume it will be "--" like it always has been so far
	dprint(10, "L[$_]\n");
	s/^([A-Za-z0-9+*]+) +([A-Za-z0-9+*]+) +//; # Input and output network interfaces. Permit iptables "+" wildcard or "*" or "any".
	@thisrule{'if_in', 'if_out'} = ($1, $2);
	dprint(10, "D: if_in $1 if_out $2");

	s/^(anywhere|!?[\d.\/]+) +//;
	$thisrule{source} = $1;
	s/^(anywhere|!?[\d.\/]+) +//;
	$thisrule{dest} = $1;

	s/\/\* (.*) \*\/ //; # Comments
	if(defined $1)
		{$thisrule{comment} = $1;}
	$thisrule{extra} = $_; # Anything left goes into here

	# TODO: Insert magic here. Parse the rule 
	push(@rules, \%thisrule);
	}
close(RULES);
print "Table summary:\n";
print "\t(Default policy: $policy)\n";
foreach my $rule (@rules)
	{
	print "RULE:\n";
	foreach my $part (keys %$rule)
		{dprint(8, "\t$part => " . $$rule{$part});}
	}

return ($policy, \@rules);
}

#################
# Display stuff

sub stdout_display_ct($$;$)
{ # Passed the big table structure and the name of a CT, display it. Optional third parameter is a hashref that tunes what's displayed
my ($tables, $ct, $options) = @_;

#TODO 
}

sub sort_tables($$)
{ # Custom sort function that gets the tables sorted in an order I like to display them in.
my ($a, $b) = @_;

}

##################
# General utilities

sub beroot
{
if($rootcheck && ($> ne 0))
	{die "You need to be root\n";}
}

sub docmd($)
{               
my ($cmdline) = @_;
dprint(2, "$0: [$cmdline]");
my $result;
if($doit)
	{
	$result = `$cmdline`;
	if($? != 0)
		{die "************Command failed!**********\n";}
	}
return $result;
}

sub dprint($$)
{
my ($loglvl, $msg) = @_;
if($debuglvl >= $loglvl)
	{print "$msg\n";}
}

